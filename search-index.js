var searchIndex = JSON.parse('{\
"strontium":{"doc":"Strontium","t":"CCAAANNNDNDNEMMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLALLLMLALAMMLLLLLLLLLLNNNNENNNNDEENNINNNDNEDDENNNNNNDNNNNNNNNNNNNNNMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNENNLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNNNNNEEDNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLFNNNNENNLLLLLLALLLAEEDNNNNNNNDNNNNNNLLLLLLLLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNNNNNNNNNELLLLLLLLLLLL","n":["Instruction","Strontium","machine","repl","types","Bytes","Float","Int","StackFrame","String","Strontium","UInt","Value","arg_count","arg_start","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_stack","clone","clone_into","consume_bool","consume_byte","consume_f32","consume_f64","consume_i16","consume_i32","consume_i64","consume_i8","consume_string","consume_u16","consume_u32","consume_u64","consume_u8","eq","execute","execute_until_halt","fmt","from","from","from","instruction","into","into","into","ip","new","opcode","push_bytecode","register","registers","return_address","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ADD","AND","APPEND","BITWISE","BitwiseMethod","CALCULATE","CALL","COMPARE","COPY","CalculateExecutor","CalculationMethod","ComparisonMethod","DIVIDE","EQ","Executor","GT","GTE","HALT","HaltExecutor","INTERRUPT","Instruction","Interrupt","InterruptExecutor","InterruptKind","JUMP","JUMPC","LOAD","LSH","LT","LTE","LoadExecutor","MODULO","MOVE","MULTIPLY","NEQ","NOT","OR","POWER","PUSH","Print","RETURN","RSH","Read","SUBTRACT","XOR","address","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","execute","execute","execute","execute","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_i64","from_i64","from_i64","from_u64","from_u64","from_u64","into","into","into","into","into","into","into","into","into","into","into","into","into","kind","to_i64","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_u64","to_u64","to_u64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","a","a","a","a","a","a","amount","amount","b","b","b","len","len","len","len","len","len","out","out","out","out","out","out","conditional_address","destination","destination","destination","destination","destination","destination","destination","destination","interrupt","method","method","method","operand1","operand1","operand2","operand2","register","source","source","value","value","value","APPEND","CALCULATE","CALL","COMPARE","COPY","HALT","ILLEGAL","INTERRUPT","JUMP","JUMPC","LOAD","MEMORY","MOVE","Opcode","PUSH","RETURN","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","from","hash","into","to_owned","try_from","try_into","type_id","Array","Array","Boolean","Boolean","Empty","Empty","Float32","Float32","Float64","Float64","Int16","Int16","Int32","Int32","Int64","Int64","Int8","Int8","Map","Map","RegisterType","RegisterValue","Registers","String","String","UInt16","UInt16","UInt32","UInt32","UInt64","UInt64","UInt8","UInt8","add","allocate_register","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","free_register","from","from","from","from_i64","from_u64","get","get_type","into","into","into","into","new","registers","set","to_i64","to_owned","to_owned","to_u64","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","launch","DivisionByZero","IllegalOpcode","InvalidUtf8String","OutOfBounds","StrontiumError","TypeMismatch","UnexpectedEof","borrow","borrow_mut","eq","fmt","from","into","program","try_from","try_into","type_id","value","BytecodeError","Constant","Constants","Float32","Float64","Int16","Int32","Int64","Int8","NoSignatureFound","Program","String","UInt16","UInt32","UInt64","UInt8","UnexpectedEOF","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","constants","deserialize","deserialize","deserialize","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_bytes","into","into","into","into","new","new","open","save","serialize","serialize","serialize","to_bytes","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","Array","Float32","Float64","Int16","Int32","Int64","Int8","Map","String","UInt16","UInt32","UInt64","UInt8","ValueType","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","to_owned","try_from","try_into","type_id"],"q":[[0,"strontium"],[5,"strontium::machine"],[65,"strontium::machine::instruction"],[252,"strontium::machine::instruction::BitwiseMethod"],[275,"strontium::machine::instruction::Instruction"],[298,"strontium::machine::opcode"],[329,"strontium::machine::register"],[407,"strontium::repl"],[408,"strontium::types"],[426,"strontium::types::program"],[507,"strontium::types::value"]],"d":["","","This module contains the virtual machine which executes …","","","","","","","","","","","The number of arguments passed to the function","The index of the first argument in the <code>registers</code> array","","","","","","","Contains references for function arguments and return …","","","","","","","","","","","","","","Consume an unsigned 64-bit integer from the bytecode …","","","Execute a single instruction.","Execute instructions until a <code>HALT</code> instruction is …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Points to the next index in the buffer of the bytecode …","Create a new instance of the virtual machine","","Append machine code to the array in the bytecode register.","","Holds general-purpose registers for storing different …","The instruction pointer to return to after the function …","","","","","","","","","","","","","Add a list of values to an array in a register","","","Perform a calculation on two registers and write the …","","","Copy a value from a register to memory or vice versa","Perform a calculation two registers and write the result …","Basic arithmetic operations which act on two registers and …","","","","","","","Stop all further execution","Stop all code execution immediately.","Set off an interrupt, for example to print a character to …","Represents a callable machine instruction","A signal indicating that an event needs immediate …","Attend to an event that needs immediate attention.","","Set the program counter to the given value","Set the program counter to a value if the given byte has …","Load a numeric value into a register","","","","Load a dynamically typed value into a named register.","","Move a value from one register address to another","","","","","","Add a value to an array in a register","","","","","","","The address to print to or read from","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The name of the array register to append to","The name of the array register to append to","","","","","","","","","","","","","","","","","The value to be pushed","The values to append","","Perform a calculation (<code>ADD</code>, <code>SUBTRACT</code>, <code>MULTIPLY</code>, <code>DIVIDE</code>) on …","","Perform a comparison (<code>EQ</code>, <code>NEQ</code>, <code>LT</code>, <code>LTE</code>, <code>GT</code>, <code>GTE</code>) on two …","Copy a value from a register to a memory location or vice …","Stop all execution instantly.","An invalid opcode.","Emit an event that needs immediate attention (<code>READ</code>, <code>PRINT</code>)","Set the program counter to a value from a location, using …","Set the program counter to a value from a location if the …","","Perform a bitwise operation (<code>AND</code>, <code>OR</code>, <code>XOR</code>, <code>NOT</code>, <code>LSH</code>, <code>RSH</code>) …","Move a value from a register to a memory location or vice …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","A linear sequence of values.","","<code>true</code> or <code>false</code>","","","","Floating point number, 32 bit","","Floating point number, 64 bit","","Signed integer, 16 bit","","Signed integer, 32 bit","","Signed integer, 64 bit","","Signed integer, 8 bit","","A key-value assignment of strings and values.","","Define possible register types which support conversion to …","","","UTF-8 string","","Unsigned integer, 16 bit","","Unsigned integer, 32 bit","","Unsigned integer, 64 bit","","Unsigned integer, 8 bit","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","A set of registers which can be resized dynamically.","","","","","","","","","","","","","","","","A division by zero has occured.","The machine encountered an invalid operation code.","","An invalid memory or register address has been accessed.","","The type of a register does not match the provided value.","The bytecode sequence has ended unexpectedly.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","A 32-bit floating point value","A 64-bit floating point value","A signed 16-bit integer","A signed 32-bit integer","A signed 64-bit integer","A signed 8-bit integer","The magic <code>strontium</code> ASCII string is not at the beginning …","","A sequence of UTF-8 graphemes","An unsigned 16-bit integer","An unsigned 32-bit integer","An unsigned 64-bit integer","An unsigned 8-bit integer","The file ends unexpectedly.","","","","","","","","","The program as compiled Strontium bytecode.","","","","","","","","","Constant values which may be stored in the header.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","The major version this project was compiled for.","A list of values.","A 32-bit floating point value","A 64-bit floating point value","A signed 16-bit integer","A signed 32-bit integer","A signed 64-bit integer","A signed 8-bit integer","","A sequence of UTF-8 graphemes","An unsigned 16-bit integer","An unsigned 32-bit integer","An unsigned 64-bit integer","An unsigned 8-bit integer","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,1,1,1,0,1,0,1,0,47,47,47,2,1,47,2,1,2,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,47,2,1,0,47,2,1,2,2,0,2,0,2,47,1,47,2,1,47,2,1,47,2,1,28,30,27,27,0,27,27,27,27,0,0,0,28,29,0,29,29,27,0,27,0,0,0,0,27,27,27,30,29,29,0,28,27,28,29,30,30,28,27,26,27,30,26,28,30,25,21,22,23,24,25,26,27,28,29,30,21,22,23,24,25,26,27,28,29,30,21,22,23,24,25,26,27,28,29,30,21,22,23,24,25,26,27,28,29,30,21,22,23,24,25,26,27,28,29,30,48,21,22,23,24,21,22,23,24,25,26,27,28,29,30,21,22,23,24,25,26,27,28,29,30,26,28,29,26,28,29,21,22,23,24,25,26,27,27,28,28,29,29,30,25,26,28,29,21,22,23,24,25,26,27,28,29,30,26,28,29,21,22,23,24,25,26,27,28,29,30,21,22,23,24,25,26,27,28,29,30,21,22,23,24,25,26,27,28,29,30,49,50,51,52,53,54,53,54,49,50,51,49,50,51,52,53,54,49,50,51,52,53,54,55,56,57,58,59,60,61,62,55,63,60,61,64,60,61,60,61,65,56,57,65,58,59,32,32,32,32,32,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,34,36,34,36,34,36,34,36,34,36,34,36,34,36,34,36,34,36,34,36,0,0,0,34,36,34,36,34,36,34,36,34,36,34,35,35,34,36,35,34,36,35,34,35,34,34,36,35,34,36,35,35,34,36,36,36,35,34,35,34,34,36,35,35,35,36,35,34,36,35,34,36,35,34,36,35,34,36,0,4,4,4,4,0,4,4,4,4,4,4,4,4,0,4,4,4,0,0,0,0,41,41,41,41,41,41,40,0,41,41,41,41,41,40,38,39,40,41,38,39,40,41,38,38,39,40,41,38,39,40,41,38,39,38,39,41,38,39,40,41,38,39,40,41,38,39,40,41,38,38,39,40,41,38,39,38,38,38,39,41,38,38,39,40,41,38,39,40,41,38,39,40,41,38,39,40,41,38,46,46,46,46,46,46,46,46,46,46,46,46,46,0,46,46,46,46,46,46,46,46,46,46,46,46],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[1,1],[[]],[2,[[5,[3,4]]]],[2,[[5,[6,4]]]],[2,[[5,[7,4]]]],[2,[[5,[8,4]]]],[2,[[5,[9,4]]]],[2,[[5,[10,4]]]],[2,[[5,[11,4]]]],[2,[[5,[12,4]]]],[2,[[5,[13,4]]]],[2,[[5,[14,4]]]],[2,[[5,[15,4]]]],[2,[[5,[16,4]]]],[2,[[5,[6,4]]]],[[1,1],3],[2,[[5,[3,4]]]],[2,[[5,[3,4]]]],[[1,17],18],[[]],[[]],[[]],0,[[]],[[]],[[]],0,[[],2],0,[[2,[19,[6]]]],0,0,0,[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[30,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[21,21],3],[[22,22],3],[[23,23],3],[[24,24],3],[[25,25],3],[[26,26],3],[[27,27],3],[[28,28],3],[[29,29],3],[[30,30],3],[2,[[5,[3,4]]]],[[21,2],[[5,[3,4]]]],[[22,2],[[5,[3,4]]]],[[23,2],[[5,[3,4]]]],[[24,2],[[5,[3,4]]]],[[21,17],18],[[22,17],18],[[23,17],18],[[24,17],18],[[25,17],18],[[26,17],18],[[27,17],18],[[28,17],18],[[29,17],18],[[30,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,[[31,[26]]]],[11,[[31,[28]]]],[11,[[31,[29]]]],[16,[[31,[26]]]],[16,[[31,[28]]]],[16,[[31,[29]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,[[19,[6]]]],[[]],[28,6],[29,6],[[]],[[]],0,[26,[[31,[11]]]],[28,[[31,[11]]]],[29,[[31,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,[[31,[16]]]],[28,[[31,[16]]]],[29,[[31,[16]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[32,32],[[]],[[32,32],3],[[],3],[[32,17],18],[6,32],[[]],[[32,33]],[[]],[[]],[[],5],[[],5],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,34],34],[35,13],[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[34,34],[[]],[[]],[[34,34],3],[[36,36],3],[[35,17],18],[[34,17],18],[[36,17],18],[[35,37]],[[]],[[]],[[]],[11,[[31,[36]]]],[16,[[31,[36]]]],[[35,37],[[31,[34]]]],[34,36],[[]],[34,[[19,[6]]]],[[]],[[]],[[],35],0,[[35,37,34]],[36,[[31,[11]]]],[[]],[[]],[36,[[31,[16]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],[[],20],[3],0,0,0,0,0,0,0,[[]],[[]],[[4,4],3],[[4,17],18],[[]],[[]],0,[[],5],[[],5],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[38,38],[39,39],[40,40],[41,41],[[]],[[]],[[]],[[]],0,0,[42,[[5,[38]]]],[42,[[5,[39]]]],[42,[[5,[41]]]],[[38,38],3],[[39,39],3],[[40,40],3],[[41,41],3],[[38,17],18],[[39,17],18],[[40,17],18],[[41,17],18],[[]],[[]],[[]],[[]],[[[43,[6]]],[[5,[38,40]]]],[[]],[[]],[[]],[[]],[[6,39,[19,[6]]],38],[19,39],[[38,13],[[44,[38]]]],[[38,13],44],[[38,45],5],[[39,45],5],[[41,45],5],[38,[[19,[6]]]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[46,46],[[]],[[46,46],3],[[46,17],18],[[]],[[]],[[]],[[],5],[[],5],[[],20]],"c":[],"p":[[4,"Value"],[3,"Strontium"],[15,"bool"],[4,"StrontiumError"],[4,"Result"],[15,"u8"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"String"],[15,"u16"],[15,"u32"],[15,"u64"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"TypeId"],[3,"CalculateExecutor"],[3,"HaltExecutor"],[3,"InterruptExecutor"],[3,"LoadExecutor"],[3,"Interrupt"],[4,"InterruptKind"],[4,"Instruction"],[4,"CalculationMethod"],[4,"ComparisonMethod"],[4,"BitwiseMethod"],[4,"Option"],[4,"Opcode"],[8,"Hasher"],[4,"RegisterValue"],[3,"Registers"],[4,"RegisterType"],[15,"str"],[3,"Program"],[3,"Constants"],[4,"BytecodeError"],[4,"Constant"],[8,"Deserializer"],[15,"slice"],[6,"Result"],[8,"Serializer"],[4,"ValueType"],[3,"StackFrame"],[8,"Executor"],[13,"AND"],[13,"OR"],[13,"XOR"],[13,"NOT"],[13,"LSH"],[13,"RSH"],[13,"JUMPC"],[13,"MOVE"],[13,"COPY"],[13,"PUSH"],[13,"APPEND"],[13,"CALCULATE"],[13,"COMPARE"],[13,"JUMP"],[13,"INTERRUPT"],[13,"BITWISE"],[13,"LOAD"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
