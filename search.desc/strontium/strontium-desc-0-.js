searchState.loadedDescShard("strontium", 0, "Strontium\nA virtual machine which executes Strontium instructions.\nConsume an unsigned 64-bit integer from the bytecode …\nExecute a single instruction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoints to the next index in the buffer of the bytecode …\nCreate a new instance of the virtual machine\nAppend machine code to the array in the bytecode register.\nHolds general-purpose registers for storing different …\nA single bytecode program with metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA reference to the contents of the <code>bc</code> register, which …\nReturns the argument unchanged.\nThe current position in the bytecode register.\nCalls <code>U::from(self)</code>.\nAdd a list of values to an array in a register\nPerform a calculation on two registers and write the …\nCopy a value from a register to memory or vice versa\nPerform a calculation two registers and write the result …\nBasic arithmetic operations which act on two registers and …\nStop all further execution\nStop all code execution immediately.\nSet off an interrupt, for example to print a character to …\nRepresents a callable machine instruction\nA signal indicating that an event needs immediate …\nAttend to an event that needs immediate attention.\nSet the program counter to the given value\nSet the program counter to a value if the given byte has …\nLoad a numeric value into a register\nLoad a dynamically typed value into a named register.\nMove a value from one register address to another\nAdd a value to an array in a register\nThe address to print to or read from\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe address to jump to (the start of the method body).\nThe name of the array register to append to\nThe name of the array register to append to\nThe value to be pushed\nThe values to append\nPerform a bitwise operation (<code>AND</code>, <code>OR</code>, <code>XOR</code>, <code>NOT</code>, <code>LSH</code>, <code>RSH</code>) …\nPerform a calculation (<code>ADD</code>, <code>SUBTRACT</code>, <code>MULTIPLY</code>, <code>DIVIDE</code>) on …\nPerform a comparison (<code>EQ</code>, <code>NEQ</code>, <code>LT</code>, <code>LTE</code>, <code>GT</code>, <code>GTE</code>) on two …\nCopy a value from a register to a memory location or vice …\nStop all execution instantly.\nAn invalid opcode.\nEmit an event that needs immediate attention (<code>READ</code>, <code>PRINT</code>)\nSet the program counter to a value from a location, using …\nSet the program counter to a value from a location if the …\nMove a value from a register to a memory location or vice …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA linear sequence of values.\n<code>true</code> or <code>false</code>\nFloating point number, 32 bit\nFloating point number, 64 bit\nSigned integer, 16 bit\nSigned integer, 32 bit\nSigned integer, 64 bit\nSigned integer, 8 bit\nA key-value assignment of strings and values.\nDefine possible register types which support conversion to …\nUTF-8 string\nUnsigned integer, 16 bit\nUnsigned integer, 32 bit\nUnsigned integer, 64 bit\nUnsigned integer, 8 bit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set of registers which can be resized dynamically.\nA division by zero has occured.\nThe machine encountered an invalid operation code.\nAn invalid memory or register address has been accessed.\nThe type of a register does not match the provided value.\nThe bytecode sequence has ended unexpectedly.\nThe user has not called <code>strontium.init()</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA 32-bit floating point value\nA 64-bit floating point value\nA signed 16-bit integer\nA signed 32-bit integer\nA signed 64-bit integer\nA signed 8-bit integer\nThe magic <code>strontium</code> ASCII string is not at the beginning …\nA sequence of UTF-8 graphemes\nAn unsigned 16-bit integer\nAn unsigned 32-bit integer\nAn unsigned 64-bit integer\nAn unsigned 8-bit integer\nThe file ends unexpectedly.\nThe program as compiled Strontium bytecode.\nConstant values which may be stored in the header.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe major version this project was compiled for.\nA list of values.\nA 32-bit floating point value\nA 64-bit floating point value\nA signed 16-bit integer\nA signed 32-bit integer\nA signed 64-bit integer\nA signed 8-bit integer\nA sequence of UTF-8 graphemes\nAn unsigned 16-bit integer\nAn unsigned 32-bit integer\nAn unsigned 64-bit integer\nAn unsigned 8-bit integer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")